version: '3.8'

services:
  app:
    build: .
    container_name: paylens_app
    restart: unless-stopped
    expose:
      - "3001"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      REFRESH_TOKEN_EXPIRES_IN: ${REFRESH_TOKEN_EXPIRES_IN}
    depends_on:
      - db
    networks:
      - proxy-tier
    command: >
      sh -c "dockerize -wait tcp://db:5432 -timeout 30s npm run db:migrate:prod && npm start"

  db:
    image: postgres:15-alpine
    container_name: paylens_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - proxy-tier

  nginx-proxy:
    image: jwilder/nginx-proxy:latest
    container_name: nginx_proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      ENABLE_IPV6: 'false'
    volumes:
      - /etc/nginx/certs:/etc/nginx/certs:rw
      - /etc/nginx/vhost.d:/etc/nginx/vhost.d:rw
      - /usr/share/nginx/html:/usr/share/nginx/html:rw
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - proxy-tier

letsencrypt:
  image: nginxproxy/acme-companion:latest
  container_name: nginx_proxy_acme
  restart: unless-stopped
  user: root        # <-- add this line
  environment:
    NGINX_PROXY_CONTAINER: nginx_proxy
    DEFAULT_EMAIL: ${LETSENCRYPT_EMAIL}
  volumes:
    - /etc/nginx/certs:/etc/nginx/certs:rw
    - /etc/nginx/vhost.d:/etc/nginx/vhost.d:rw
    - /usr/share/nginx/html:/usr/share/nginx/html:rw
    - /var/run/docker.sock:/tmp/docker.sock:ro
  depends_on:
    - nginx-proxy
  networks:
    - proxy-tier


volumes:
  pgdata:

networks:
  proxy-tier:
    driver: bridge
